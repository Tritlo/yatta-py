// Generated by CoffeeScript 1.8.0
(function() {
  var clearCanvas, clock, drawCenterDot, drawClockFace, drawCountdown, drawHand, drawMark, drawTime, drawTimePeriod, drawTomato, getAngle;

  clock = {};

  clock.halfWidth = 240;

  clock.halfHeight = 240;

  clock.radius = 200;

  clock.innerDotRadius = clock.radius / 50;

  clock.minutehandlength = clock.radius * 0.8;

  clock.secondhandlength = clock.radius * 0.9;

  clock.hourhandlength = clock.radius * 0.5;

  clock.qmlength = clock.radius / 10;

  drawMark = function(ctx, x, y, angle, length) {
    var r, xe, xs, ye, ys;
    r = clock.radius;
    xs = x + r * Math.cos(angle);
    ys = y + r * Math.sin(angle);
    xe = x + (r - length) * Math.cos(angle);
    ye = y + (r - length) * Math.sin(angle);
    ctx.beginPath();
    ctx.moveTo(xs, ys);
    ctx.lineTo(xe, ye);
    ctx.closePath();
    return ctx.stroke();
  };

  drawClockFace = function(ctx) {
    var i, _i, _j, _k;
    ctx.strokeStyle = "black";
    ctx.fillStyle = "lightgrey";
    ctx.lineCap = "square";
    ctx.lineWidth = 5.0;
    ctx.beginPath();
    ctx.arc(clock.halfWidth, clock.halfHeight, clock.radius, 0, Math.PI * 2, false);
    ctx.closePath();
    ctx.stroke();
    ctx.fill();
    ctx.save();
    ctx.lineWidth = clock.radius / 100;
    for (i = _i = 0; _i <= 60; i = ++_i) {
      drawMark(ctx, clock.halfWidth, clock.halfHeight, i * (Math.PI / 30), clock.qmlength);
    }
    ctx.lineWidth = clock.radius / 50;
    for (i = _j = 0; _j <= 12; i = ++_j) {
      drawMark(ctx, clock.halfWidth, clock.halfHeight, i * (Math.PI / 6), clock.qmlength + clock.radius / 20);
    }
    ctx.lineWidth = clock.radius / 25;
    for (i = _k = 0; _k <= 3; i = ++_k) {
      drawMark(ctx, clock.halfWidth, clock.halfHeight, i * (Math.PI / 2), clock.qmlength + clock.radius / 8);
    }
    return ctx.restore();
  };

  drawCenterDot = function(ctx) {
    ctx.save();
    ctx.fillStyle = "black";
    ctx.strokeStyle = "black";
    ctx.beginPath();
    ctx.arc(clock.halfWidth, clock.halfHeight, clock.innerDotRadius, 0, Math.PI * 2, false);
    ctx.closePath();
    ctx.stroke();
    ctx.fill();
    return ctx.restore();
  };

  drawHand = function(ctx, length, angle) {
    ctx.beginPath();
    ctx.moveTo(clock.halfWidth, clock.halfHeight);
    ctx.lineTo(clock.halfWidth + length * Math.cos(angle), clock.halfHeight + length * Math.sin(angle));
    ctx.closePath();
    return ctx.stroke();
  };

  getAngle = function(length, roundlength, sublength, subroundlength) {
    if (sublength == null) {
      sublength = 0;
    }
    if (subroundlength == null) {
      subroundlength = 1;
    }
    return -(Math.PI / 2) + (2 * Math.PI * length / roundlength) + (2 * Math.PI * sublength / (roundlength * subroundlength));
  };

  drawTime = function(ctx, h, m, s) {
    ctx.save();
    ctx.lineWidth = 7;
    drawHand(ctx, clock.hourhandlength, getAngle(h, 12, m, 60));
    ctx.lineWidth = 5;
    drawHand(ctx, clock.minutehandlength, getAngle(m, 60, s, 60));
    ctx.lineWidth = 1;
    ctx.strokeStyle = "red";
    drawHand(ctx, clock.secondhandlength, getAngle(s, 60));
    return ctx.restore();
  };

  drawTimePeriod = function(ctx, x, y, radius, sm, ss, em, es) {
    var e, s;
    s = getAngle(sm, 60, ss, 60);
    e = getAngle(em, 60, es, 60);
    ctx.save();
    ctx.lineWidth = 6.0;
    ctx.beginPath();
    ctx.arc(x, y, radius, s, e, false);
    ctx.arc(x, y, radius, e, s, true);
    ctx.closePath();
    ctx.stroke();
    return ctx.restore();
  };

  drawTomato = function(ctx, clock, tomato) {
    var bm, breaklength, bs, em, end, es, sm, ss, start, tbreak, timeleft;
    start = new Date(tomato.start);
    timeleft = tomato.timeleft;
    breaklength = tomato.breaklength;
    if (tomato.end != null) {
      end = new Date(tomato.end);
    } else {
      end = new Date();
      end.setTime(end.getTime() + timeleft * 1000);
    }
    tbreak = new Date(end.getTime() + breaklength * 60 * 1000);
    sm = start.getMinutes();
    ss = start.getSeconds();
    em = end.getMinutes();
    es = end.getSeconds();
    bm = tbreak.getMinutes();
    bs = tbreak.getSeconds();
    ctx.save();
    ctx.strokeStyle = "red";
    drawTimePeriod(ctx, clock.halfWidth, clock.halfHeight, clock.radius, sm, ss, em, es);
    ctx.strokeStyle = "blue";
    drawTimePeriod(ctx, clock.halfWidth, clock.halfHeight, clock.radius, em, es, bm, bs);
    return ctx.restore();
  };

  drawCountdown = function(ctx, cx, cy, radius, h, m, s) {
    var str;
    str = "";
    s = Math.round(s);
    if (h > 0) {
      str += h + ":";
    }
    if (m >= 10) {
      str += m + ":";
    } else if (m > 0) {
      str += "0" + m + ":";
    }
    if (s >= 10) {
      str += s;
    } else if (s > 0) {
      str += "0" + s;
    } else {
      str += "00";
    }
    ctx.save();
    if (Session.get("working")) {
      ctx.fillStyle = "white";
    } else {
      ctx.fillStyle = "#FFFF00";
    }
    ctx.font = "20pt Arial";
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.beginPath();
    ctx.fillText(str, cx, cy + (Math.floor(radius / 2)));
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    return ctx.restore();
  };

  clearCanvas = function(ctx) {
    return ctx.clearRect(0, 0, clock.halfWidth * 2, clock.halfHeight * 2);
  };

  share.drawCurrentTime = function() {
    var bl, canvas, countdownOn, counter, ctx, h, m, paused, s, sh, sm, ss, stime, time, tomato, wl;
    canvas = document.getElementById("clock");
    ctx = canvas.getContext("2d");
    countdownOn = Session.get("countdownOn");
    paused = Session.get("paused");
    if (countdownOn === true || paused) {
      counter = Session.get("timeleft");
      stime = new Date(Session.get("laststarttime"));
      sh = stime.getHours() % 12;
      sm = stime.getMinutes();
      ss = stime.getSeconds();
    }
    clearCanvas(ctx);
    drawClockFace(ctx);
    time = new Date();
    h = time.getHours() % 12;
    m = time.getMinutes();
    s = time.getSeconds();
    if (countdownOn === true || paused) {
      wl = Session.get("worklength");
      bl = Session.get("breaklength");
      tomato = {
        start: stime,
        length: wl,
        timeleft: counter,
        breaklength: bl
      };
      drawTomato(ctx, clock, tomato);
      drawCountdown(ctx, clock.halfWidth, clock.halfHeight, clock.radius, 0, Math.floor(counter / 60), counter % 60);
    }
    drawTime(ctx, h, m, s);
    return drawCenterDot(ctx);
  };

}).call(this);
