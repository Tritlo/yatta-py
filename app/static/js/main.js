// Generated by CoffeeScript 1.8.0
(function() {
  var bl, doubleClick, logCountdownEvent, pauseClick, pauseCountdown, resetCountdown, secsToString, singleClick, startBreak, startCountdown, startstopClick, state, stopCountdown, timerFinished, update, wl;

  state = {};

  resetCountdown = function() {
    var ms;
    ms = Session.get("worklength");
    Session.set("timeleft", ms * 60);
    Session.set("onBreak", false);
    return Session.set("working", true);
  };

  startCountdown = function() {
    var currID, wasPaused;
    Session.set("countdownOn", true);
    wasPaused = Session.get("paused");
    Session.set("paused", false);
    currID = Session.get("currID");
    Session.set("currID", currID + 1);
    logCountdownEvent("start", wasPaused);
    return share.drawCurrentTime();
  };

  pauseCountdown = function() {
    Session.set("countdownOn", false);
    Session.set("paused", true);
    logCountdownEvent("pause");
    return share.drawCurrentTime();
  };

  stopCountdown = function() {
    Session.set("countdownOn", false);
    Session.set("paused", false);
    logCountdownEvent("stop");
    return share.drawCurrentTime();
  };

  logCountdownEvent = function(state, wasPaused) {
    var currID, log, time;
    log = Session.get("Log");
    time = new Date();
    time = time.toISOString();
    currID = Session.get("currID");
    switch (state) {
      case "start":
        if (!wasPaused) {
          log[currID] = {
            start: time
          };
          Session.set("laststarttime", time);
        }
        break;
      case "stop":
        log[currID].stop = time;
        Session.set("laststarttime", void 0);
        break;
      case "pause":
    }
    return Session.set("Log", log);
  };

  secsToString = function(time) {
    var mins, secs, str;
    secs = time % 60;
    mins = Math.floor(time / 60);
    str = "";
    if (mins > 0) {
      str += mins + "m ";
    }
    if (secs > 0) {
      str += secs + "s";
    }
    if ((secs <= 0) && (mins <= 0)) {
      return "Time over!";
    }
    return str;
  };

  startBreak = function() {
    var bl;
    bl = Session.get("breaklength");
    Session.set("timeleft", bl * 60);
    Session.set("countdownOn", true);
    Session.set("onBreak", true);
    return Session.set("working", false);
  };

  timerFinished = function() {
    stopCountdown();
    if (Session.get("onBreak" === true)) {
      return resetCountdown();
    } else {
      return startBreak();
    }
  };

  update = function() {
    var c, d, dt, t, timeleft;
    d = new Date();
    t = d.getTime();
    dt = t - state.lastUpdate;
    state.timeSinceLastUpdate += dt;
    c = Session.get("countdownOn");
    if (c === true) {
      if (state.timeSinceLastUpdate <= 1500) {
        if (state.lastSeconds !== d.getSeconds()) {
          timeleft = Session.get("timeleft");
          Session.set("timeleft", --timeleft);
          state.timeSinceLastUpdate = 0;
        }
      } else {
        timeleft -= Math.round(state.timeSinceLastUpdate / 1000);
        state.timeSinceLastUpdate = 0;
      }
      if (timeleft <= 0) {
        timerFinished();
      }
    }
    state.lastUpdate = t;
    state.lastSeconds = d.getSeconds();
    return share.drawCurrentTime();
  };

  wl = 1;

  bl = 1;

  Session.setDefault("onBreak", false);

  Session.setDefault("working", true);

  Session.setDefault("timeleft", wl * 60);

  Session.setDefault("worklength", wl);

  Session.setDefault("breaklength", bl);

  Session.setDefault("currID", 0);

  Session.setDefault("countdownOn", false);

  Session.setDefault("Log", {});

  Session.setDefault("paused", false);

  Template.timer.helpers({
    timeleft: function() {
      var time;
      time = Session.get("timeleft");
      return secsToString(time);
    }
  });

  Template.controls.helpers({
    buttonText: function() {
      var on_;
      on_ = Session.get("countdownOn");
      if (on_) {
        return "Stop countdown";
      }
      return "Start countdown";
    }
  });

  startstopClick = function() {
    var on_;
    on_ = Session.get("countdownOn");
    if (!on_) {
      startCountdown();
    } else {
      stopCountdown();
      resetCountdown();
    }
  };

  pauseClick = function() {
    var on_;
    on_ = Session.get("countdownOn");
    if (on_) {
      return pauseCountdown();
    }
  };

  singleClick = function(f) {
    var singleClickHelper;
    Session.set("clickedonlyonce", true);
    singleClickHelper = function() {
      var clickedonce;
      clickedonce = Session.get("clickedonlyonce");
      Session.set("clickedonlyonce", false);
      if (clickedonce === true) {
        return f();
      }
    };
    return setTimeout(singleClickHelper, 100);
  };

  doubleClick = function(f) {
    Session.set("clickedonlyonce", void 0);
    return f();
  };

  Template.timer.events({
    "click #clock": function() {
      return singleClick(startstopClick);
    },
    "dblclick #clock": function() {
      return doubleClick(pauseClick);
    }
  });

  Template.controls.events({
    "click .startstop": function() {
      return startstopClick();
    },
    "click .pause": function() {
      return pauseClick();
    }
  });

  Template.log.entries = function() {
    var entries, entryid, log;
    log = Session.get("Log");
    entries = [];
    for (entryid in log) {
      entries.push(log[entryid]);
    }
    return entries;
  };

  Meteor.startup(function() {
    share.drawCurrentTime();
    state.lastupdate = 0;
    state.timeSinceLastUpdate = 0;
    state.lastSeconds = -1;
    return Meteor.setInterval(update, 500);
  });

}).call(this);
